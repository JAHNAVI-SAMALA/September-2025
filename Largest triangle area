from typing import List

class Solution:
    def cross(self, o, a, b):
        return (a[0]-o[0])*(b[1]-o[1]) - (a[1]-o[1])*(b[0]-o[0])
    
    def convexHull(self, points):
        points = sorted(points)
        if len(points) <= 1:
            return points
        lower, upper = [], []
        for p in points:
            while len(lower) >= 2 and self.cross(lower[-2], lower[-1], p) <= 0:
                lower.pop()
            lower.append(p)
        for p in reversed(points):
            while len(upper) >= 2 and self.cross(upper[-2], upper[-1], p) <= 0:
                upper.pop()
            upper.append(p)
        return lower[:-1] + upper[:-1]

    def largestTriangleArea(self, points: List[List[int]]) -> float:
        hull = self.convexHull(points)
        h = len(hull)
        max_area = 0.0
        for i in range(h):
            k = i + 2
            for j in range(i+1, h):
                while k < h:
                    area1 = abs(self.cross(hull[i], hull[j], hull[k])) / 2.0
                    area2 = abs(self.cross(hull[i], hull[j], hull[(k+1)%h])) / 2.0
                    if area2 > area1:
                        k += 1
                    else:
                        break
                max_area = max(max_area, abs(self.cross(hull[i], hull[j], hull[k%h])) / 2.0)
        return max_area
